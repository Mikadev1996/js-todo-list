(()=>{"use strict";var n={426:(n,r,t)=>{t.d(r,{Z:()=>f});var e=t(537),o=t.n(e),i=t(645),A=t.n(i),a=t(667),d=t.n(a),l=new URL(t(687),t.b),p=new URL(t(755),t.b),c=A()(o()),s=d()(l),u=d()(p);c.push([n.id,'@font-face {\r\n    font-family: "Montserrat";\r\n    src: url('+s+") format('truetype');\r\n    font-weight: 400;\r\n    font-style: normal;\r\n}\r\n\r\n@font-face {\r\n    font-family: \"Montserrat-Bold\";\r\n    src: url("+u+") format('truetype');\r\n}\r\n\r\n.bold {\r\n    font-weight: bold;\r\n}\r\n\r\nbutton {\r\n    border: none;\r\n    background: none;\r\n}\r\n\r\ninput {\r\n    color: whitesmoke;\r\n    margin: 5px;\r\n    padding: 5px;\r\n    background: #282828;\r\n    border: none;\r\n}\r\n\r\ntextarea:focus, input:focus{\r\n    outline: none;\r\n}\r\n\r\nli {\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nul {\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nbody {\r\n    margin: 0;\r\n    padding: 0;\r\n    background: #171717;\r\n    font-family: Montserrat, sans-serif;\r\n    color: whitesmoke;\r\n    overflow: hidden;\r\n    display: block;\r\n}\r\n\r\np {\r\n    margin: 3px 0;\r\n    color: darkgrey;\r\n}\r\n\r\n#app {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n}\r\n\r\n#top-bar {\r\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 15%);\r\n    height: 44px;\r\n}\r\n\r\n#top-bar-content {\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    margin-left: 4rem;\r\n}\r\n\r\n\r\n#content {\r\n    background: #171717;\r\n    display: flex;\r\n    flex-grow: 1;\r\n}\r\n\r\n\r\n#left-menu {\r\n    font-weight: bold;\r\n    position: fixed;\r\n    width: 305px;\r\n    height: calc(100vh - 44px);\r\n    background: #282828;\r\n    left: 0;\r\n}\r\n\r\n.menu-item {\r\n    padding: 10px;\r\n}\r\n\r\n@media only screen and (max-width: 550px) {\r\n\r\n    #left-menu {\r\n        display: none;\r\n        /*pointer-events: none;*/\r\n    }\r\n\r\n    #editor {\r\n        margin-left: 0;\r\n        width: 100vw;\r\n    }\r\n\r\n    #today-view {\r\n        width: 100vw;\r\n    }\r\n}\r\n\r\n\r\n@media only screen and (min-width: 550px) {\r\n    #editor {\r\n        margin-left: 305px;\r\n        width: calc(100vw - 305px);\r\n    }\r\n\r\n    #today-view {\r\n        width: calc(100vw - 305px);\r\n    }\r\n}\r\n#list-holder {\r\n    padding-top: 2rem;\r\n    padding-left: 1rem;\r\n}\r\n#editor {\r\n    height: calc(100vh - 44px);\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-width: 305px;\r\n\r\n}\r\n\r\n#view-header {\r\n    height: 120px;\r\n    display: flex;\r\n    width: 100%;\r\n}\r\n\r\n#header-content {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n    width: 100%;\r\n    margin-left: 4rem;\r\n}\r\n\r\n.todo-header {\r\n    border-bottom: 1px solid #282828;\r\n}\r\n\r\n#today-view {\r\n    height: calc(100vh - (44px + 120px));\r\n}\r\n\r\n#lists-box {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: start;\r\n    justify-content: center;\r\n    width: 100%;\r\n    padding: 2rem 0;\r\n}\r\n\r\n#lists {\r\n    padding-left: 25px;\r\n    padding-right: 25px;\r\n    width: 600px;\r\n    margin: 0 auto;\r\n    position: relative;\r\n    z-index: 1;\r\n}\r\n\r\n.list {\r\n    margin-bottom: 50px;\r\n}\r\n\r\n.todo {\r\n    padding: 6px;\r\n}\r\n.todo-item {\r\n    min-width: 300px;\r\n    border-bottom: solid 1px #282828;\r\n    font-size: 14px;\r\n}\r\n\r\n.list-content {\r\n    display: flex;\r\n}\r\n\r\n.checkbox-btn {\r\n    height: 100%;\r\n\r\n}\r\n\r\n.checkbox-div {\r\n    margin: 2px 10px;\r\n}\r\n\r\n.checkbox {\r\n    width: 15px;\r\n    height: 15px;\r\n}\r\n\r\n\r\n.todo-btn {\r\n    margin-top: 1rem;\r\n}\r\n\r\n.list-text {\r\n    margin: 3px 0;\r\n}\r\n\r\n.input-section {\r\n    width: 90%;\r\n    color: whitesmoke;\r\n    background: #282828;\r\n    padding: 5px;\r\n    border: darkgrey 1px solid;\r\n    border-radius: 3px;\r\n}\r\n\r\n.inputs {\r\n    width: 90%;\r\n}\r\n\r\n.input-title {\r\n    font-weight: bold;\r\n}\r\n\r\n.options {\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.option-btn {\r\n    padding: 7px;\r\n    margin: 10px;\r\n    font-weight: bold;\r\n    border-radius: 3px;\r\n}\r\n\r\n.add-todo {\r\n    border-radius: 3px;\r\n    background: #1a73e8;\r\n    color: black;\r\n    padding: 10px;\r\n}\r\n\r\n.cancel-add-todo {\r\n    background: #282828;\r\n    border: darkgrey 1px solid;\r\n    color: whitesmoke;\r\n}\r\n\r\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,yBAAyB;IACzB,+DAAuD;IACvD,gBAAgB;IAChB,kBAAkB;AACtB;;AAEA;IACI,8BAA8B;IAC9B,+DAAoD;AACxD;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,gBAAgB;AACpB;;AAEA;IACI,iBAAiB;IACjB,WAAW;IACX,YAAY;IACZ,mBAAmB;IACnB,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,gBAAgB;IAChB,SAAS;IACT,UAAU;AACd;;AAEA;IACI,gBAAgB;IAChB,SAAS;IACT,UAAU;AACd;;AAEA;IACI,SAAS;IACT,UAAU;IACV,mBAAmB;IACnB,mCAAmC;IACnC,iBAAiB;IACjB,gBAAgB;IAChB,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;AACjB;;AAEA;IACI,wCAAwC;IACxC,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,aAAa;IACb,2BAA2B;IAC3B,mBAAmB;IACnB,iBAAiB;AACrB;;;AAGA;IACI,mBAAmB;IACnB,aAAa;IACb,YAAY;AAChB;;;AAGA;IACI,iBAAiB;IACjB,eAAe;IACf,YAAY;IACZ,0BAA0B;IAC1B,mBAAmB;IACnB,OAAO;AACX;;AAEA;IACI,aAAa;AACjB;;AAEA;;IAEI;QACI,aAAa;QACb,wBAAwB;IAC5B;;IAEA;QACI,cAAc;QACd,YAAY;IAChB;;IAEA;QACI,YAAY;IAChB;AACJ;;;AAGA;IACI;QACI,kBAAkB;QAClB,0BAA0B;IAC9B;;IAEA;QACI,0BAA0B;IAC9B;AACJ;AACA;IACI,iBAAiB;IACjB,kBAAkB;AACtB;AACA;IACI,0BAA0B;;IAE1B,aAAa;IACb,sBAAsB;IACtB,gBAAgB;;AAEpB;;AAEA;IACI,aAAa;IACb,aAAa;IACb,WAAW;AACf;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,YAAY;IACZ,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,gCAAgC;AACpC;;AAEA;IACI,oCAAoC;AACxC;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,kBAAkB;IAClB,uBAAuB;IACvB,WAAW;IACX,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,mBAAmB;IACnB,YAAY;IACZ,cAAc;IACd,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,YAAY;AAChB;AACA;IACI,gBAAgB;IAChB,gCAAgC;IAChC,eAAe;AACnB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;;AAEhB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;;AAGA;IACI,gBAAgB;AACpB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,UAAU;IACV,iBAAiB;IACjB,mBAAmB;IACnB,YAAY;IACZ,0BAA0B;IAC1B,kBAAkB;AACtB;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,mBAAmB;IACnB,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,mBAAmB;IACnB,0BAA0B;IAC1B,iBAAiB;AACrB",sourcesContent:["@font-face {\r\n    font-family: \"Montserrat\";\r\n    src: url('./Montserrat-Regular.ttf') format('truetype');\r\n    font-weight: 400;\r\n    font-style: normal;\r\n}\r\n\r\n@font-face {\r\n    font-family: \"Montserrat-Bold\";\r\n    src: url('./Montserrat-Bold.ttf') format('truetype');\r\n}\r\n\r\n.bold {\r\n    font-weight: bold;\r\n}\r\n\r\nbutton {\r\n    border: none;\r\n    background: none;\r\n}\r\n\r\ninput {\r\n    color: whitesmoke;\r\n    margin: 5px;\r\n    padding: 5px;\r\n    background: #282828;\r\n    border: none;\r\n}\r\n\r\ntextarea:focus, input:focus{\r\n    outline: none;\r\n}\r\n\r\nli {\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nul {\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nbody {\r\n    margin: 0;\r\n    padding: 0;\r\n    background: #171717;\r\n    font-family: Montserrat, sans-serif;\r\n    color: whitesmoke;\r\n    overflow: hidden;\r\n    display: block;\r\n}\r\n\r\np {\r\n    margin: 3px 0;\r\n    color: darkgrey;\r\n}\r\n\r\n#app {\r\n    display: flex;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n}\r\n\r\n#top-bar {\r\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 15%);\r\n    height: 44px;\r\n}\r\n\r\n#top-bar-content {\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    margin-left: 4rem;\r\n}\r\n\r\n\r\n#content {\r\n    background: #171717;\r\n    display: flex;\r\n    flex-grow: 1;\r\n}\r\n\r\n\r\n#left-menu {\r\n    font-weight: bold;\r\n    position: fixed;\r\n    width: 305px;\r\n    height: calc(100vh - 44px);\r\n    background: #282828;\r\n    left: 0;\r\n}\r\n\r\n.menu-item {\r\n    padding: 10px;\r\n}\r\n\r\n@media only screen and (max-width: 550px) {\r\n\r\n    #left-menu {\r\n        display: none;\r\n        /*pointer-events: none;*/\r\n    }\r\n\r\n    #editor {\r\n        margin-left: 0;\r\n        width: 100vw;\r\n    }\r\n\r\n    #today-view {\r\n        width: 100vw;\r\n    }\r\n}\r\n\r\n\r\n@media only screen and (min-width: 550px) {\r\n    #editor {\r\n        margin-left: 305px;\r\n        width: calc(100vw - 305px);\r\n    }\r\n\r\n    #today-view {\r\n        width: calc(100vw - 305px);\r\n    }\r\n}\r\n#list-holder {\r\n    padding-top: 2rem;\r\n    padding-left: 1rem;\r\n}\r\n#editor {\r\n    height: calc(100vh - 44px);\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    min-width: 305px;\r\n\r\n}\r\n\r\n#view-header {\r\n    height: 120px;\r\n    display: flex;\r\n    width: 100%;\r\n}\r\n\r\n#header-content {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n    width: 100%;\r\n    margin-left: 4rem;\r\n}\r\n\r\n.todo-header {\r\n    border-bottom: 1px solid #282828;\r\n}\r\n\r\n#today-view {\r\n    height: calc(100vh - (44px + 120px));\r\n}\r\n\r\n#lists-box {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: start;\r\n    justify-content: center;\r\n    width: 100%;\r\n    padding: 2rem 0;\r\n}\r\n\r\n#lists {\r\n    padding-left: 25px;\r\n    padding-right: 25px;\r\n    width: 600px;\r\n    margin: 0 auto;\r\n    position: relative;\r\n    z-index: 1;\r\n}\r\n\r\n.list {\r\n    margin-bottom: 50px;\r\n}\r\n\r\n.todo {\r\n    padding: 6px;\r\n}\r\n.todo-item {\r\n    min-width: 300px;\r\n    border-bottom: solid 1px #282828;\r\n    font-size: 14px;\r\n}\r\n\r\n.list-content {\r\n    display: flex;\r\n}\r\n\r\n.checkbox-btn {\r\n    height: 100%;\r\n\r\n}\r\n\r\n.checkbox-div {\r\n    margin: 2px 10px;\r\n}\r\n\r\n.checkbox {\r\n    width: 15px;\r\n    height: 15px;\r\n}\r\n\r\n\r\n.todo-btn {\r\n    margin-top: 1rem;\r\n}\r\n\r\n.list-text {\r\n    margin: 3px 0;\r\n}\r\n\r\n.input-section {\r\n    width: 90%;\r\n    color: whitesmoke;\r\n    background: #282828;\r\n    padding: 5px;\r\n    border: darkgrey 1px solid;\r\n    border-radius: 3px;\r\n}\r\n\r\n.inputs {\r\n    width: 90%;\r\n}\r\n\r\n.input-title {\r\n    font-weight: bold;\r\n}\r\n\r\n.options {\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.option-btn {\r\n    padding: 7px;\r\n    margin: 10px;\r\n    font-weight: bold;\r\n    border-radius: 3px;\r\n}\r\n\r\n.add-todo {\r\n    border-radius: 3px;\r\n    background: #1a73e8;\r\n    color: black;\r\n    padding: 10px;\r\n}\r\n\r\n.cancel-add-todo {\r\n    background: #282828;\r\n    border: darkgrey 1px solid;\r\n    color: whitesmoke;\r\n}\r\n\r\n"],sourceRoot:""}]);const f=c},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var t="",e=void 0!==r[5];return r[4]&&(t+="@supports (".concat(r[4],") {")),r[2]&&(t+="@media ".concat(r[2]," {")),e&&(t+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),t+=n(r),e&&(t+="}"),r[2]&&(t+="}"),r[4]&&(t+="}"),t})).join("")},r.i=function(n,t,e,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var A={};if(e)for(var a=0;a<this.length;a++){var d=this[a][0];null!=d&&(A[d]=!0)}for(var l=0;l<n.length;l++){var p=[].concat(n[l]);e&&A[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),t&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=t):p[2]=t),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),r.push(p))}},r}},667:n=>{n.exports=function(n,r){return r||(r={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),r.hash&&(n+=r.hash),/["'() \t\n]|(%20)/.test(n)||r.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var r=n[1],t=n[3];if(!t)return r;if("function"==typeof btoa){var e=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(e),i="/*# ".concat(o," */"),A=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[r].concat(A).concat([i]).join("\n")}return[r].join("\n")}},379:n=>{var r=[];function t(n){for(var t=-1,e=0;e<r.length;e++)if(r[e].identifier===n){t=e;break}return t}function e(n,e){for(var i={},A=[],a=0;a<n.length;a++){var d=n[a],l=e.base?d[0]+e.base:d[0],p=i[l]||0,c="".concat(l," ").concat(p);i[l]=p+1;var s=t(c),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==s)r[s].references++,r[s].updater(u);else{var f=o(u,e);e.byIndex=a,r.splice(a,0,{identifier:c,updater:f,references:1})}A.push(c)}return A}function o(n,r){var t=r.domAPI(r);return t.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap&&r.supports===n.supports&&r.layer===n.layer)return;t.update(n=r)}else t.remove()}}n.exports=function(n,o){var i=e(n=n||[],o=o||{});return function(n){n=n||[];for(var A=0;A<i.length;A++){var a=t(i[A]);r[a].references--}for(var d=e(n,o),l=0;l<i.length;l++){var p=t(i[l]);0===r[p].references&&(r[p].updater(),r.splice(p,1))}i=d}}},569:n=>{var r={};n.exports=function(n,t){var e=function(n){if(void 0===r[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}r[n]=t}return r[n]}(n);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");e.appendChild(t)}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r,n.options),r}},565:(n,r,t)=>{n.exports=function(n){var r=t.nc;r&&n.setAttribute("nonce",r)}},795:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(t){!function(n,r,t){var e="";t.supports&&(e+="@supports (".concat(t.supports,") {")),t.media&&(e+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(e+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),e+=t.css,o&&(e+="}"),t.media&&(e+="}"),t.supports&&(e+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),r.styleTagTransform(e,n,r.options)}(r,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}},755:(n,r,t)=>{n.exports=t.p+"079ca05d3ded9bc107ab.ttf"},687:(n,r,t)=>{n.exports=t.p+"3cd786652b8a2e9d41f2.ttf"}},r={};function t(e){var o=r[e];if(void 0!==o)return o.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,t),i.exports}t.m=n,t.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return t.d(r,{a:r}),r},t.d=(n,r)=>{for(var e in r)t.o(r,e)&&!t.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:r[e]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var r=t.g.document;if(!n&&r&&(r.currentScript&&(n=r.currentScript.src),!n)){var e=r.getElementsByTagName("script");e.length&&(n=e[e.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href;var e={};(()=>{t.d(e,{a:()=>I});var n=t(379),r=t.n(n),o=t(795),i=t.n(o),A=t(569),a=t.n(A),d=t(565),l=t.n(d),p=t(216),c=t.n(p),s=t(589),u=t.n(s),f=t(426),h={};h.styleTagTransform=u(),h.setAttributes=l(),h.insert=a().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=c(),r()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals;let m=["default","exampleSecond"],g={default:{todos:[{id:0,title:"Title",description:"First Todo",date:"Date DD/MM/YYYY"}]},exampleSecond:{todos:[{id:0,title:"Example Second",description:"Second Todo",date:"Date DD/MM/YYYY"}]}},C=[{id:1,menu:"Inbox"},{id:2,menu:"Today"},{id:3,menu:"Week"}];function B(n){const r=document.getElementById("default");console.log("refresh todo ",n),r.innerHTML="",g[n].todos.forEach((t=>{let e=I("li",`list-${n}-${t.id}`,["todo","todo-item"]),o=I("div",null,["list-content"]),i=I("div",null,["checkbox-div"]),A=I("button",`checkbox-${t.id}`,["checkbox-btn"]);A.onclick=()=>{!function(n,r){const t=g[n].todos;for(let n=0;n<t.length;n++)if(t[n].id===r){t.splice(n,1);break}B(n)}(n,t.id)};let a=I("img",null,["checkbox"]);a.src="https://iconmonstr.com/wp-content/g/gd/makefg.php?i=../assets/preview/2018/png/iconmonstr-check-mark-circle-thin.png&r=242&g=242&b=242",A.append(a),i.append(A);let d=I("div",null,["list-text"],t.title),l=I("p",null,null,t.description);d.append(l),o.append(i,d),e.append(o),r.append(e)}));const t=I("li","new-todo-list-item",["todo","todo-btn"]),e=I("button",null,["add-todo"],"+ Add Todo");return t.append(e),r.append(t),e.onclick=()=>{!function(n){console.log("addTodoUI function");const r=document.getElementById("new-todo-list-item");r.innerHTML="",r.append(function(){const r=I("div",null,["new-todo"]),t=I("div",null,["input-section"]),e=I("span"),o=I("input","default-title",["inputs","input-title"]);o.type="text",o.placeholder="eg., Get pastries sun at 9",e.append(o);const i=I("span"),A=I("input","default-desc",["inputs","input-title"]);return A.type="text",A.placeholder="Description",i.append(A),t.append(e,i),r.append(t,function(){const r=I("div",null,["options"]),t=I("div"),e=I("button","default-confirm",["option-btn","add-todo"],"Confirm Task");t.append(e),e.addEventListener("click",(()=>{!function(n){const r=document.getElementById("default-title").value,t=document.getElementById("default-desc").value,e={id:g[n].todos.length,title:r,description:t,date:new Date};console.log(e),0===r.length?window.alert("Please insert a title"):(g[n].todos.push(e),B(n))}(n)}));const o=I("div"),i=I("button",null,["option-btn","cancel-add-todo"],"Cancel");return t.append(i),i.onclick=()=>{B(n)},r.append(t,o),r}()),r}())}(n)},t.append(e),r.append(t),r}function I(n,r,t,e){const o=document.createElement(n);return r&&(o.id=r),t&&t.forEach((n=>{o.classList.add(n)})),e&&(o.textContent=e),o}document.body.appendChild(function(){const n=I("div","app");return n.append(function(){const n=I("nav","top-bar"),r=I("div","top-bar-content",null,"JavaScript"),t=I("strong","",null,"Todo-list");return r.append(t),n.append(r),n}(),function(){const n=I("main"),r=I("div","content-wrapper");return r.append(function(){const n=I("div","left-menu"),r=I("div","list-holder"),t=I("ul",null,["list"]);C.forEach((n=>{let r=I("li",null,["menu-item"],n.menu);t.append(r)}));const e=I("ul",null,["list"]),o=I("header",null,["menu-item","bold"],"Projects");return e.append(o),m.forEach((n=>{let r=I("li",null,["menu-item"],n);r.addEventListener("click",(()=>{console.log(n),B(n)})),e.append(r)})),r.append(t,e),n.append(r),n.append(r),n}(),function(){const n=I("div","editor");return n.append(function(){const n=I("div","view-header"),r=I("div","header-content"),t=I("h1",null,null,"Today"),e=I("p",null,null,"Date");return r.append(t,e),n.append(r),n}(),function(){const n=I("div","today-view"),r=I("div","lists-box"),t=I("div","lists"),e=I("div","section-list"),o=I("ul",null,["list-collection"]),i=I("li",null,["list"]),A=I("header",null,["todo-header","todo"]," Todo List Group 1"),a=I("ul","default",["todo","todo-list"]);return i.append(A,a),o.append(i),e.append(o),t.append(e),r.append(t),n.append(r),n}()),n}()),n.append(r),n}()),n}()),B("default")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,